## Spring cloud config
#
## Eureka config for discovery
#eureka.client.serviceUrl.defaultZone=http://localhost:9528/eureka/
#eureka.instance.preferIpAddress=true
#
## Consul config for discovery
#spring.cloud.consul.host=localhost
#spring.cloud.consul.port=8500
#spring.cloud.consul.discovery.preferIpAddress=true
#
## Zookeeper config for discovery
#spring.cloud.zookeeper.connectString=localhost:2181
#spring.cloud.zookeeper.discovery.instancePort=${server.port}
#spring.cloud.zookeeper.discovery.root=/spring-cloud
#spring.cloud.zookeeper.discovery.preferIpAddress=true
#
## Nacos config for discovery
#spring.cloud.nacos.discovery.server-addr=localhost:8848
## spring.cloud.nacos.discovery.namespace=discovery
#
## Ribbon config
#ribbon.ServerListRefreshInterval=5000
#ribbon.ConnectTimeout=60000
#ribbon.ReadTimeout=60000
#ribbon.maxAutoRetries=3
#ribbon.maxAutoRetriesNextServer=3
#ribbon.okToRetryOnAllOperations=true
#
## Apollo config for rule
#app.id=discovery
#apollo.meta=http://localhost:8080
## apollo.plugin.namespace=application
#
## Nacos config for rule
#nacos.server-addr=localhost:8848
## nacos.access-key=
## nacos.secret-key=
## nacos.plugin.namespace=application
## nacos.plugin.cluster-name=
## nacos.plugin.context-path=
## nacos.plugin.config-long-poll-timeout=
## nacos.plugin.config-retry-time=
## nacos.plugin.max-retry=
## nacos.plugin.endpoint=
## nacos.plugin.endpoint-port=
## nacos.plugin.is-use-endpoint-parsing-rule=
## nacos.plugin.is-use-cloud-namespace-parsing=
## nacos.plugin.encode=
## nacos.plugin.naming-load-cache-at-start=
## nacos.plugin.naming-client-beat-thread-count=
## nacos.plugin.naming-polling-thread-count=
## nacos.plugin.ram-role-name=
## nacos.plugin.timout=
#
## Redis config for rule
#spring.redis.host=localhost
#spring.redis.port=6379
#spring.redis.password=
#spring.redis.database=0
#
## Management config
## 该项只对Consul有效，而且必须配置在bootstrap.properties里，配置在application.properties无效
## management.health.consul.enabled=true
#management.endpoints.web.exposure.include=*
#management.endpoints.jmx.exposure.include=*
#management.endpoint.health.show-details=ALWAYS
#
## Spring boot admin config
#spring.boot.admin.client.instance.prefer-ip=true
#spring.boot.admin.client.url=http://localhost:5555
#
## Plugin core config
## 开启和关闭服务注册层面的控制。一旦关闭，服务注册的黑/白名单过滤功能将失效，最大注册数的限制过滤功能将失效。缺失则默认为true
## spring.application.register.control.enabled=true
## 开启和关闭服务发现层面的控制。一旦关闭，服务多版本调用的控制功能将失效，动态屏蔽指定IP地址的服务实例被发现的功能将失效。缺失则默认为true
## spring.application.discovery.control.enabled=true
## 开启和关闭通过Rest方式对规则配置的控制和推送。一旦关闭，只能通过远程配置中心来控制和推送。缺失则默认为true
## spring.application.config.rest.control.enabled=true
## 规则文件的格式，支持xml和json。缺失则默认为xml
## spring.application.config.format=xml
## spring.application.config.format=json
## 本地规则文件的路径，支持两种方式：classpath:rule.xml（rule.json） - 规则文件放在resources目录下，便于打包进jar；file:rule.xml（rule.json） - 规则文件放在工程根目录下，放置在外部便于修改。缺失则默认为不装载本地规则
## spring.application.config.path=classpath:rule.xml
## spring.application.config.path=classpath:rule.json
## 为微服务归类的Key，一般通过group字段来归类，例如eureka.instance.metadataMap.group=xxx-group或者eureka.instance.metadataMap.application=xxx-application。缺失则默认为group
## spring.application.group.key=group
## spring.application.group.key=application
## 业务系统希望大多数时候Spring、SpringBoot或者SpringCloud的基本配置、调优参数（非业务系统配置参数），不配置在业务端，集成到基础框架里。但特殊情况下，业务系统有时候也希望能把基础框架里配置的参数给覆盖掉，用他们自己的配置
## 对于此类型的配置需求，可以配置在下面的配置文件里。该文件一般放在resource目录下。缺失则默认为spring-application-default.properties
## spring.application.default.properties.path=spring-application-default.properties
## 负载均衡下，消费端尝试获取对应提供端初始服务实例列表为空的时候，进行重试。缺失则默认为false
## spring.application.no.servers.retry.enabled=false
## 负载均衡下，消费端尝试获取对应提供端初始服务实例列表为空的时候，进行重试的次数。缺失则默认为5
## spring.application.no.servers.retry.times=5
## 负载均衡下，消费端尝试获取对应提供端初始服务实例列表为空的时候，进行重试的时间间隔。缺失则默认为2000
## spring.application.no.servers.retry.await.time=2000
## 负载均衡下，消费端尝试获取对应提供端服务实例列表为空的时候，通过日志方式通知。缺失则默认为false
## spring.application.no.servers.notify.enabled=false
#
## Plugin strategy config
## 开启和关闭路由策略的控制。一旦关闭，路由策略功能将失效。缺失则默认为true
## spring.application.strategy.control.enabled=true
## 开启和关闭Ribbon默认的ZoneAvoidanceRule负载均衡策略。一旦关闭，则使用RoundRobin简单轮询负载均衡策略。缺失则默认为true
## spring.application.strategy.zone.avoidance.rule.enabled=true
## 路由策略过滤器的执行顺序（Order）。缺失则默认为9000
## spring.application.strategy.gateway.route.filter.order=9000
## 当外界传值Header的时候，网关也设置并传递同名的Header，需要决定哪个Header传递到后边的服务去。如果下面开关为true，以网关设置为优先，否则以外界传值为优先。缺失则默认为true
#spring.application.strategy.gateway.header.priority=false
## 当以网关设置为优先的时候，网关未配置Header，而外界配置了Header，仍旧忽略外界的Header。缺失则默认为true
## spring.application.strategy.gateway.original.header.ignored=true
## 启动和关闭网关上核心策略Header传递，缺失则默认为true。当全局订阅启动时，可以关闭核心策略Header传递，这样可以节省传递数据的大小，一定程度上可以提升性能。核心策略Header，包含如下
## 1. n-d-version
## 2. n-d-region
## 3. n-d-address
## 4. n-d-version-weight
## 5. n-d-region-weight
## 6. n-d-id-blacklist
## 7. n-d-address-blacklist
## 8. n-d-env (不属于灰度蓝绿范畴的Header，只要外部传入就会全程传递)
## spring.application.strategy.gateway.core.header.transmission.enabled=true
## 启动和关闭注册的服务隔离（基于Group黑/白名单的策略）。缺失则默认为false
#spring.application.strategy.register.isolation.enabled=true
## 启动和关闭消费端的服务隔离（基于Group是否相同的策略）。缺失则默认为false
#spring.application.strategy.consumer.isolation.enabled=true
#
## 启动和关闭监控，一旦关闭，调用链和日志输出都将关闭。缺失则默认为false
#spring.application.strategy.monitor.enabled=true
## 启动和关闭日志输出。缺失则默认为false
#spring.application.strategy.logger.enabled=true
## 日志输出中，是否显示MDC前面的Key。缺失则默认为true
## spring.application.strategy.logger.mdc.key.shown=true
## 启动和关闭Debug日志打印，注意：每调用一次都会打印一次，会对性能有所影响，建议压测环境和生产环境关闭。缺失则默认为false
#spring.application.strategy.logger.debug.enabled=true
## 启动和关闭调用链输出。缺失则默认为false
#spring.application.strategy.tracer.enabled=true
## 启动和关闭调用链的灰度信息以独立的Span节点输出，如果关闭，则灰度信息输出到原生的Span节点中（SkyWalking不支持原生模式）。缺失则默认为true
## spring.application.strategy.tracer.separate.span.enabled=true
## 启动和关闭调用链的灰度规则策略信息输出。缺失则默认为true
## spring.application.strategy.tracer.rule.output.enabled=true
## 启动和关闭调用链的异常信息是否以详细格式输出。缺失则默认为false
## spring.application.strategy.tracer.exception.detail.output.enabled=false
## 显示在调用链界面上灰度Span的名称，建议改成具有公司特色的框架产品名称。缺失则默认为NEPXION
## spring.application.strategy.tracer.span.value=NEPXION
## 显示在调用链界面上灰度Span Tag的插件名称，建议改成具有公司特色的框架产品的描述。缺失则默认为Nepxion Discovery
## spring.application.strategy.tracer.span.tag.plugin.value=Nepxion Discovery
## 启动和关闭Sentinel调用链上规则在Span上的输出，注意：原生的Sentinel不是Spring技术栈，下面参数必须通过-D方式或者System.setProperty方式等设置进去。缺失则默认为true
## spring.application.strategy.tracer.sentinel.rule.output.enabled=true
## 启动和关闭Sentinel调用链上方法入参在Span上的输出，注意：原生的Sentinel不是Spring技术栈，下面参数必须通过-D方式或者System.setProperty方式等设置进去。缺失则默认为false
## spring.application.strategy.tracer.sentinel.args.output.enabled=false
#
## 开启Spring Cloud Gateway网关上实现Hystrix线程隔离模式做服务隔离时，必须把spring.application.strategy.hystrix.threadlocal.supported设置为true，同时要引入discovery-plugin-strategy-starter-hystrix包，否则线程切换时会发生ThreadLocal上下文对象丢失。缺失则默认为false
## spring.application.strategy.hystrix.threadlocal.supported=true
#
## 版本故障转移，即无法找到相应版本的服务实例，路由到老的稳定版本的实例。其作用是防止灰度版本路由人为设置错误，或者对应的版本实例发生灾难性的全部下线，导致流量有损
## 启动和关闭版本故障转移。缺失则默认为false
## spring.application.strategy.version.failover.enabled=true
## 版本偏好，即非灰度路由场景下，路由到老的稳定版本的实例。其作用是防止多个网关上并行实施灰度版本路由产生混乱，对处于非灰度状态的服务，调用它的时候，只取它的老的稳定版本的实例；灰度状态的服务，还是根据传递的Header版本号进行匹配
## 启动和关闭版本偏好。缺失则默认为false
## spring.application.strategy.version.prefer.enabled=true
#
## 流量路由到指定的环境下。不允许为保留值default，缺失则默认为common
## spring.application.environment.route=common
#
## 启动和关闭可用区亲和性，即同一个可用区的服务才能调用，同一个可用区的条件是调用端实例和提供端实例的元数据Metadata的zone配置值必须相等。缺失则默认为false
## spring.application.zone.affinity.enabled=false
## 启动和关闭可用区亲和性失败后的路由，即调用端实例没有找到同一个可用区的提供端实例的时候，当开关打开，可路由到其它可用区或者不归属任何可用区，当开关关闭，则直接调用失败。缺失则默认为true
## spring.application.zone.route.enabled=true
#
## 启动和关闭在服务启动的时候参数订阅事件发送。缺失则默认为true
## spring.application.parameter.event.onstart.enabled=true
#
## 开启和关闭使用服务名前缀来作为服务组名。缺失则默认为false
## spring.application.group.generator.enabled=true
## 服务名前缀的截断长度，必须大于0
## spring.application.group.generator.length=15
## 服务名前缀的截断标志。当截断长度配置了，则取截断长度方式，否则取截断标志方式
## spring.application.group.generator.character=-
#
## 开启和关闭使用Git信息中的字段单个或者多个组合来作为服务版本号。缺失则默认为false
## spring.application.git.generator.enabled=true
## 插件git-commit-id-plugin产生git信息文件的输出路径，支持properties和json两种格式，支持classpath:xxx和file:xxx两种路径，这些需要和插件里的配置保持一致。缺失则默认为classpath:git.properties
## spring.application.git.generator.path=classpath:git.properties
## spring.application.git.generator.path=classpath:git.json
## 使用Git信息中的字段单个或者多个组合来作为服务版本号。缺失则默认为{git.commit.time}-{git.total.commit.count}
## spring.application.git.version.key={git.commit.id.abbrev}-{git.commit.time}
## spring.application.git.version.key={git.build.version}-{git.commit.time}
#
## Spring cloud gateway config
## 当启动自动路由（locator.enabled=true）时候，必须关闭reactive模式。支持H版或更高版本的配置，其它版本不需要该行配置
## spring.cloud.discovery.reactive.enabled=false
## spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true
#spring.cloud.gateway.routes[0].id=discovery-springcloud-example-a
#spring.cloud.gateway.routes[0].predicates[0]=Path=/discovery-springcloud-example-a/**
## spring.cloud.gateway.routes[0].filters[0]=SetPath=/discovery-springcloud-example-a/**
## Gateway如果用Consul做服务注册发现中心，必须配置StripPrefix=1，其他配置中心配不配无所谓，但建议都配
#spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
#spring.cloud.gateway.routes[0].uri=lb://discovery-springcloud-example-a
#
## Hystrix配置
## spring.cloud.gateway.routes[0].filters[1].name=Hystrix
## spring.cloud.gateway.routes[0].filters[1].args.name=default
## spring.cloud.gateway.routes[0].filters[1].args.fallbackUri=forward:/fallback
## hystrix.command.default.execution.isolation.strategy=THREAD
## hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000